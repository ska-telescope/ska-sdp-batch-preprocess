variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"
  CONTAINER_SCANNING_DISABLED: true
  PYTHON_RUNNER: "poetry run"
  SPHINXBUILD: "${PYTHON_RUNNER} sphinx-build"


stages:
  - lint
  - scan
  - build
  - test
  - publish
  - pages

include:
  - project: "ska-telescope/templates-repository"
    file: 
     - "gitlab-ci/includes/python.gitlab-ci.yml"
     - "gitlab-ci/includes/docs.gitlab-ci.yml"
     - "gitlab-ci/includes/finaliser.gitlab-ci.yml"
     - "gitlab-ci/includes/release.gitlab-ci.yml"

build-docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind  # docker-in-docker service
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - |
      if docker pull $CI_REGISTRY_IMAGE:latest > /dev/null 2>&1; then
        echo "Using latest image as build cache"
        docker build --cache-from $CI_REGISTRY_IMAGE:latest --build-arg BUILDKIT_INLINE_CACHE=1 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
      else
        echo "Building image from scratch"
        docker build --build-arg BUILDKIT_INLINE_CACHE=1 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .        
      fi
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

python-lint:
  cache: []

docs-build:
  cache: []

python-test:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  needs: ["build-docker"]
  cache: []
