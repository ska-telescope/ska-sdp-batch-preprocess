variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"

stages:
  - lint
  - scan
  - build
  - test
  - publish
  - pages

# Include CI templates
include:
  # Docs pages
  - project: "ska-telescope/templates-repository"
    file: 
     - "gitlab-ci/includes/python.gitlab-ci.yml"
     - "gitlab-ci/includes/docs.gitlab-ci.yml"
     - "gitlab-ci/includes/finaliser.gitlab-ci.yml"
     - "gitlab-ci/includes/release.gitlab-ci.yml"

# Override python-test job to use custom image and activate spack
python-test:
  image: saliei/ska-sdp-spack:0.1.0
  before_script:
    # Activate spack environment
    - . /spack/share/spack/setup-env.sh
    - spack env activate sdp
    - spack load dp3
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-test'
    - poetry config virtualenvs.in-project true
    - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - |
      if [[ -f pyproject.toml ]]; then
        if [[ -n $CI_POETRY_VERSION ]] && [[ $(poetry --version) != *$CI_POETRY_VERSION* ]]; then
          echo "python-test: Updating poetry to $CI_POETRY_VERSION";
          pipx uninstall poetry && pipx install poetry==$CI_POETRY_VERSION;
        fi;
      echo "python-test: Installing with poetry";
      time poetry install --all-extras;
      else
        if  [[ -f requirements.txt ]]; then
          echo "python-test: Installing with pip";
          time pip3 install -r requirements.txt;
        fi;
      fi;
