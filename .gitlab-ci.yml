variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"
  CONTAINER_SCANNING_DISABLED: true

stages:
  - lint
  - scan
  - build
  - test
  - publish
  - pages

include:
  - project: "ska-telescope/templates-repository"
    file:
      - "gitlab-ci/includes/python.gitlab-ci.yml"
      - "gitlab-ci/includes/docs.gitlab-ci.yml"
      - "gitlab-ci/includes/finaliser.gitlab-ci.yml"
      - "gitlab-ci/includes/release.gitlab-ci.yml"

build-docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind # docker-in-docker service
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    # Find commit SHA to build
    - git fetch --unshallow
    - TARGET_SHA=$(git log -n 1 --pretty=format:%H -- Dockerfile)
    - |
      if [[ -z $TARGET_SHA ]]; then
        echo "ERROR: No commit SHA found for Dockerfile"
        exit 1
      fi
    - TARGET_IMAGE=$CI_REGISTRY_IMAGE:$TARGET_SHA
    - echo "TARGET_IMAGE=$TARGET_IMAGE" > versions.env
    - cat versions.env

    # Skip build if adequate image already in registry
    - |
      if docker manifest inspect $TARGET_IMAGE > /dev/null 2>&1; then
        echo "Up-to-date image already in registry for commit $TARGET_SHA"
        echo "BUILD_CACHE_IMAGE=$TARGET_IMAGE" > build_cache_image.env
        exit 0
      fi

    # Build
    - |
      if [[ -f build_cache_image.env ]]; then
        source build_cache_image.env
      fi
    - |
      if [[ -z $BUILD_CACHE_IMAGE ]]; then
        echo "Building Dockerfile at commit $TARGET_SHA without build cache"
        docker build . --build-arg BUILDKIT_INLINE_CACHE=1 --tag $TARGET_IMAGE
      else
        echo "Building Dockerfile at commit $TARGET_SHA using build cache from: $BUILD_CACHE_IMAGE"
        docker build . --build-arg BUILDKIT_INLINE_CACHE=1 --tag $TARGET_IMAGE --cache-from $BUILD_CACHE_IMAGE
      fi
    - docker push $TARGET_IMAGE
    - echo "BUILD_CACHE_IMAGE=$TARGET_IMAGE" > build_cache_image.env

  # Make image name available to dependent jobs
  artifacts:
    reports:
      dotenv: versions.env

  # Cache the most recently built and pushed image name on a per-branch basis
  cache:
    key: $CI_COMMIT_REF_NAME
    fallback_keys:
      - $CI_DEFAULT_BRANCH
    paths:
      - build_cache_image.env

python-test:
  needs: ["build-docker"]
  image: $TARGET_IMAGE
