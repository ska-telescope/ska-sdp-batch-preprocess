variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"
  CONTAINER_SCANNING_DISABLED: true

stages:
  - lint
  - scan
  - build
  - test
  - publish
  - pages

include:
  - project: "ska-telescope/templates-repository"
    file:
      - "gitlab-ci/includes/python.gitlab-ci.yml"
      - "gitlab-ci/includes/docs.gitlab-ci.yml"
      - "gitlab-ci/includes/finaliser.gitlab-ci.yml"
      - "gitlab-ci/includes/release.gitlab-ci.yml"

build-docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind # docker-in-docker service
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    # Find commit SHA to build
    - git fetch --unshallow
    - COMMIT_SHA=$(git log -n 1 --pretty=format:%H -- Dockerfile)
    - |
      if [[ -z $COMMIT_SHA ]]; then
        echo "ERROR: No commit SHA found for Dockerfile"
        exit 1
      fi
    - DOCKER_IMAGE=$CI_REGISTRY_IMAGE:$COMMIT_SHA
    - echo "DOCKER_IMAGE=$DOCKER_IMAGE" > versions.env
    - cat versions.env

    # Skip build if adequate image already in registry
    - |
      if docker manifest inspect $DOCKER_IMAGE > /dev/null 2>&1; then
        echo "Up-to-date image already in registry for commit $COMMIT_SHA"
        echo "BUILD_CACHE_IMAGE=$DOCKER_IMAGE" > build_cache_image.env
        exit 0
      fi

    # Build
    - |
      if [[ -f build_cache_image.env ]]; then
        source build_cache_image.env
      fi
    - |
      if [[ -z $BUILD_CACHE_IMAGE ]]; then
        echo "Building Dockerfile at commit $COMMIT_SHA without build cache"
        docker build . --build-arg BUILDKIT_INLINE_CACHE=1 --tag $DOCKER_IMAGE
      else
        echo "Building Dockerfile at commit $COMMIT_SHA using build cache from: $BUILD_CACHE_IMAGE"
        docker build . --build-arg BUILDKIT_INLINE_CACHE=1 --tag $DOCKER_IMAGE --cache-from $BUILD_CACHE_IMAGE
      fi
    - docker push $DOCKER_IMAGE
    - echo "BUILD_CACHE_IMAGE=$DOCKER_IMAGE" > build_cache_image.env

  # Make image name available to dependent jobs
  artifacts:
    reports:
      dotenv: versions.env

  # Cache the most recent image name available in registry, on a per-branch basis
  cache:
    key: $CI_COMMIT_REF_NAME
    fallback_keys:
      - $CI_DEFAULT_BRANCH
    paths:
      - build_cache_image.env

.custom_before_script: &custom_before_script
  - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile"; exit 1;)'
  - "make help | grep python-lint"
  - pipx install uv
  - uv python install 3.11
  - uv venv .venv/ -p 3.11
  - poetry config virtualenvs.in-project true
  - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
  - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
  - |
    if [[ -f pyproject.toml ]]; then
      if [[ -n $CI_POETRY_VERSION ]] && [[ $(poetry --version) != *$CI_POETRY_VERSION* ]]; then
        echo "python-lint: Updating poetry to $CI_POETRY_VERSION";
        pipx uninstall poetry && pipx install poetry==$CI_POETRY_VERSION;
      fi;

      echo "python-lint: Installing with poetry";
      time poetry install --all-extras;
    else
      if  [[ -f requirements.txt ]]; then
        echo "python-lint: Installing with pip";
        time pip3 install -r requirements.txt;
      fi;
    fi;

python-lint:
  before_script: *custom_before_script

python-test:
  needs: ["build-docker"]
  image: $DOCKER_IMAGE
  before_script: *custom_before_script
