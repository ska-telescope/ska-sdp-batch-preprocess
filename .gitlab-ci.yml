variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"
  CONTAINER_SCANNING_DISABLED: true

stages:
  - lint
  - scan
  - build
  - test
  - publish
  - pages

include:
  - project: "ska-telescope/templates-repository"
    file: 
     - "gitlab-ci/includes/python.gitlab-ci.yml"
     - "gitlab-ci/includes/docs.gitlab-ci.yml"
     - "gitlab-ci/includes/finaliser.gitlab-ci.yml"
     - "gitlab-ci/includes/release.gitlab-ci.yml"

build-docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind  # docker-in-docker service
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - |
      if docker pull $CI_REGISTRY_IMAGE:latest > /dev/null 2>&1; then
        echo "Using latest image as build cache"
        docker build --cache-from $CI_REGISTRY_IMAGE:latest --build-arg BUILDKIT_INLINE_CACHE=1 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
      else
        echo "Building image from scratch"
        docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .        
      fi
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

.poetry-before-script: &poetry-before-script
  - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile"; exit 1;)'
  - rm -rf .venv
  - 'make help | grep python-lint'
  - poetry config virtualenvs.in-project true
  - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
  - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
  - |
    if [[ -f pyproject.toml ]]; then
      if [[ -n $CI_POETRY_VERSION ]] && [[ $(poetry --version) != *$CI_POETRY_VERSION* ]]; then
        echo "python-lint: Updating poetry to $CI_POETRY_VERSION";
        pipx uninstall poetry && pipx install poetry==$CI_POETRY_VERSION;
      fi;

      echo "python-lint: Installing with poetry";
      time poetry install --all-extras;
    else
      if  [[ -f requirements.txt ]]; then
        echo "python-lint: Installing with pip";
        time pip3 install -r requirements.txt;
      fi;
    fi;

python-lint:
  before_script:
    *poetry-before-script

docs-build:
  before_script:
    *poetry-before-script

python-test:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  needs: ["build-docker"]
  before_script:
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-test'
    - | 
      echo "configuring poetry venv and sourcing it"
      poetry config virtualenvs.in-project true
      poetry config virtualenvs.create true
      poetry env use python3
      source $(poetry env info --path)/bin/activate
    - |
      if [[ -n $CI_POETRY_VERSION ]] && [[ $(poetry --version) != *$CI_POETRY_VERSION* ]]; then
        echo "python-test: Updating poetry to $CI_POETRY_VERSION";
        pipx uninstall poetry && pipx install poetry==$CI_POETRY_VERSION;
      fi;
      echo "python-test: Installing with poetry";
      time poetry install --all-extras;
